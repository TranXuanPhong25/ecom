
volumes:
  kong_db_data: {}  # Named volume to persist Postgres data across container restarts

networks:
  backend:
    driver: bridge
  kong-net:      # Custom bridge network for isolated Kong and Postgres communication
    driver: bridge
# Common environment variables used by Kong services (bootstrap and CP)
x-kong-config: &kong-env
  KONG_DATABASE: postgres             # Use Postgres as the backing database
  KONG_PG_HOST: kong-database      # Hostname of the Postgres service
  KONG_PG_DATABASE: kong              # Name of the database to connect to
  KONG_PG_USER: kong                  # Database username
  KONG_PG_PASSWORD: kong              # Database password

services:
  kong-db:
    image: postgres:13
    container_name: kong-db
    restart: unless-stopped
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.6
    container_name: kong-migrations
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - kong-net

  kong:
    image: kong:3.6
    container_name: kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    volumes:
      - ./kong/plugins:/usr/local/kong/plugins
      - ./kong/conf/kong.conf:/etc/kong/kong.conf
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
    networks:
      - backend
      - kong-net
  jwt-service:
    build:
      context: ./jwt-service
    container_name: jwt-service
    restart: on-failure
    ports:
      - "50051:50051"
    networks:
      - kong-net
  postgres-product-review:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5433:5432"
    networks:
      - backend
  postgres-product-category:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5434:5432"
    networks:
      - backend
  product-review:
    build:
      context: ./product-review
    restart: on-failure
    ports:
      - "8200:8200"
    depends_on:
      - postgres-product-review
    environment:
      DB_HOST: postgres-product-review
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    networks:
      - backend
  product-category:
    build:
      context: ./product-category
      target: dev
    ports:
      - "8097:8097"
    depends_on:
      - postgres-product-category
    environment:
      DB_HOST: postgres-product-category
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
        - ./product-category:/app
    networks:
      - backend
