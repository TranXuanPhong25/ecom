
volumes:
  kong_db_data: {}  # Named volume to persist Postgres data across container restarts
  postgres_product_reviews_data: {}  # Named volume for product review Postgres data
  postgres_product_categories_data: {}  # Named volume for product category Postgres data
  postgres_users_data: {}  # Named volume for user Postgres data
  auth_redis_data: {}  # Named volume for Redis data used by auth service
  prometheus_data: {}  # Named volume for Prometheus data persistence
  postgres_products_data: {}  # Named volume for product Postgres data
  postgres_shops_data: { }  # Named volume for shop Postgres data
networks:
  backend:
    driver: bridge
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend

  kong-db:
    image: postgres:13
    container_name: kong-db
    restart: unless-stopped
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - backend

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.6
    container_name: kong-migrations
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - backend

  kong:
    image: kong:3.6
    container_name: kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    volumes:
      - ./kong/plugins/bin:/usr/local/kong/plugins/bin
      - ./kong/conf/kong.conf:/etc/kong/kong.conf
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
    networks:
      - backend

  jwt-service:
    working_dir: /app
    build:
      context: ./jwt-service
      dockerfile: Dockerfile.dev

    container_name: jwt-service
    volumes:
      - ./jwt-service:/app
    restart: on-failure
    ports:
      - "50051:50051"
    networks:

      - backend
  postgres-product-reviews:
    image: postgres:15-alpine
    volumes:
      - postgres_product_reviews_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5433:5432"
    networks:
      - backend
  postgres-product-categories:
    image: postgres:15-alpine
    volumes:
      - postgres_product_categories_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5434:5432"
    networks:
      - backend
  postgres-users:
    image: postgres:15-alpine
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5435:5432"
    networks:
      - backend
  postgres-products:
    image: postgres:15-alpine
    volumes:
      - postgres_products_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5436:5432"
    networks:
      - backend
  postgres-shops:
    image: postgres:15-alpine
    volumes:
      - postgres_shops_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5437:5432"
    networks:
      - backend
  product-reviews-service:
    container_name: product-reviews-service
    build:
      context: ./product-reviews
    restart: on-failure
    ports:
      - "8200:8200"
    depends_on:
      - postgres-product-reviews
    environment:
      DB_HOST: postgres-product-reviews
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    networks:
      - backend
  auth-redis:
    image: redis:7-alpine
    container_name: auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./auth/repositories/redis.conf:/usr/local/etc/redis/redis.conf:Z
      - auth_redis_data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - backend
  product-categories-service:
    container_name: product-categories-service
    build:
      context: ./product-categories
      target: dev
    ports:
      - "8081:8080"
    depends_on:
      - postgres-product-categories
    environment:
      DB_HOST: postgres-product-categories
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
        - ./product-categories:/app
    networks:
      - backend
  auth-service:
    container_name: auth-service
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    ports:
      - "8202:8202"
    depends_on:
      - users-service
      - jwt-service
      - auth-redis
    environment:
      REDIS_ADDR: auth-redis:6379
      REDIS_PASSWORD: redis-password
    volumes:
      - ./auth:/app
    networks:
      - backend


  users-service:
    container_name: users-service
    # image: cosmtrek/air
    # working_dir: /app

    build:
      context: ./users
      dockerfile: Dockerfile.dev
    ports:
      - "50052:50052"
    depends_on:
      - postgres-users
    environment:
      DB_HOST: postgres-users
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
      - ./users:/app
    networks:
      - backend
  products-service:
    container_name: products-service
    build:
      context: ./products
      target: dev
    ports:
      - "8080:8080"
    depends_on:
      - products-test
      - postgres-products
    environment:
      DB_HOST: postgres-products
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
      - ./products:/app
    networks:
      - backend
  products-test:
    build:
      target: test
      dockerfile: Dockerfile
      context: ./products
    depends_on:
      - postgres-products
    environment:
      SPRING_PROFILES_ACTIVE: test
      MAVEN_OPTS: -Xmx1024m
      DB_HOST: postgres-products
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
      - ./products:/app
    networks:
      - backend
  shops-service:
    working_dir: /app
    build:
      context: ./shops
      dockerfile: Dockerfile.dev
    container_name: shops-service
    volumes:
      - ./shops:/app
    restart: on-failure
    environment:
      DB_HOST: postgres-shops
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    ports:
      - "8203:8203"
    networks:
      - backend
  opa-server:
    image: openpolicyagent/opa:latest
    container_name: opa-server
    ports:
      - "8181:8181"
    volumes:
      - ./opa/policies:/policies
    command: [ "run", "--server", "--addr=:8181", "--log-level=debug", "/policies" ]
    networks:
      - backend
  upload-service:
    build:
      context: ./upload
      dockerfile: Dockerfile.dev
    container_name: upload-service
    volumes:
      - ./upload:/app
    restart: on-failure
    ports:
      - "8204:8204"
    networks:
      - backend
