volumes:
  postgres_product_reviews_data: {}
  postgres_product_categories_data: {}
  postgres_users_data: {}
  auth_redis_data: {}
  prometheus_data: {}
  postgres_products_data: {}
  postgres_shops_data: {}
  minio_data: {}

networks:
  backend:
    driver: bridge

services:
  # Infrastructure services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
  kong:
    image: kong:3.6
    container_name: kong
    volumes:
      - ./kong/plugins/bin:/usr/local/kong/plugins/bin
      - ./kong/conf/kong.conf:/etc/kong/kong.conf
      - ./kong/conf/kong.yml:/usr/local/kong/declarative/kong.yml
    restart: unless-stopped
    environment:
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
    networks:
      - backend

  # Database services
  postgres-product-reviews:
    image: postgres:15-alpine
    volumes:
      - postgres_product_reviews_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5433:5432"
    networks:
      - backend

  postgres-product-categories:
    image: postgres:15-alpine
    volumes:
      - postgres_product_categories_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5434:5432"
    networks:
      - backend

  postgres-users:
    image: postgres:15-alpine
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5435:5432"
    networks:
      - backend

  postgres-products:
    image: postgres:15-alpine
    volumes:
      - postgres_products_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5436:5432"
    networks:
      - backend

  postgres-shops:
    image: postgres:15-alpine
    volumes:
      - postgres_shops_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5437:5432"
    networks:
      - backend

  # Redis cache for auth service
  auth-redis:
    image: redis:7-alpine
    container_name: auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - auth_redis_data:/data
    networks:
      - backend

  # MinIO object storage
  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9001:9000"
      - "9002:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin1234
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - backend

  minio-proxy:
    container_name: minio-proxy
    image: nginx:latest
    ports:
      - "9000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend
    depends_on:
      - minio

  # gRPC services
  jwt-service:
    image: rengumin/jwt-service:latest
    working_dir: /app
    build:
      context: ./jwt-service
      dockerfile: Dockerfile.dev
    container_name: jwt-service
    environment:
      JWT_SECRET_KEY: 5RNWhpC3kHEpw0LHUnj8Z5jYcC6JYUphNGL13eUMSUnQ
    volumes:
      - ./jwt-service:/app
    restart: on-failure
    networks:
      - backend

  users-service:
    image: rengumin/users-service:latest
    container_name: users-service
    build:
      context: ./users
      dockerfile: Dockerfile.dev
    depends_on:
      - postgres-users
    environment:
      DB_HOST: postgres-users
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
      - ./users:/app
    networks:
      - backend

  # REST API services (starting from 8081)
  products-service:
    image: rengumin/products-service:latest
    container_name: products-service
    build:
      context: ./products
      target: dev
    depends_on:
#      - products-test
      - postgres-products
    environment:
      DB_HOST: postgres-products
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
      PRODUCT_CATEGORIES_SERVICE_URL: http://product-categories-service:8080/api/product-categories
    volumes:
      - ./products:/app
    networks:
      - backend

  product-reviews-service:
    image: rengumin/product-reviews-service:latest
    container_name: product-reviews-service
    build:
      context: ./product-reviews
    restart: on-failure
    depends_on:
      - postgres-product-reviews
    environment:
      DB_HOST: postgres-product-reviews
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    networks:
      - backend

  product-categories-service:
    image: rengumin/product-categories-service:latest
    container_name: product-categories-service
    build:
      context: ./product-categories
      target: dev
    depends_on:
      - postgres-product-categories
    environment:
      DB_HOST: postgres-product-categories
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    volumes:
      - ./product-categories:/app
    networks:
      - backend

  auth-service:
    image: rengumin/auth-service:latest
    container_name: auth-service
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - users-service
      - jwt-service
      - auth-redis
    environment:
      REDIS_ADDR: auth-redis:6379
    volumes:
      - ./auth:/app
    networks:
      - backend

  shops-service:
    image: rengumin/shops-service:latest
    working_dir: /app
    build:
      context: ./shops
      dockerfile: Dockerfile.dev
    container_name: shops-service
    volumes:
      - ./shops:/app
    restart: on-failure
    environment:
      DB_HOST: postgres-shops
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      DB_PORT: 5432
    networks:
      - backend

  upload-service:
    image: rengumin/upload-service:latest
    build:
      context: ./upload-service
      dockerfile: Dockerfile.dev
    container_name: upload-service
    volumes:
      - ./upload-service:/app
    restart: on-failure
    ports:
      - "8080:8080"
    networks:
      - backend

  # Other services
  opa-server:
    image: openpolicyagent/opa:latest
    container_name: opa-server
    ports:
      - "8181:8181"
    volumes:
      - ./opa/policies:/policies
    command: ["run", "--server", "--addr=:8181", "--log-level=debug", "/policies"]
    networks:
      - backend
#
#  products-test:
#    build:
#      target: test
#      dockerfile: Dockerfile
#      context: ./products
#    depends_on:
#      - postgres-products
#    environment:
#      SPRING_PROFILES_ACTIVE: test
#      MAVEN_OPTS: -Xmx1024m
#      DB_HOST: postgres-products
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: mydatabase
#      DB_PORT: 5432
#    volumes:
#      - ./products:/app
#    networks:
#      - backend
