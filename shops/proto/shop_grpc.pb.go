// protoc --proto_path=/usr/local/include/:. --go_out=. --go_opt=paths=source_relative  --go-grpc_out=. --go-grpc_opt=paths=source_relative  proto/shop.proto
//export PATH="$PATH:$(go env GOPATH)/bin"

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/shop.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopsService_GetShopsByIDs_FullMethodName = "/users.ShopsService/GetShopsByIDs"
)

// ShopsServiceClient is the client API for ShopsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopsServiceClient interface {
	GetShopsByIDs(ctx context.Context, in *GetShopsByIDsRequest, opts ...grpc.CallOption) (*GetShopsByIDsResponse, error)
}

type shopsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopsServiceClient(cc grpc.ClientConnInterface) ShopsServiceClient {
	return &shopsServiceClient{cc}
}

func (c *shopsServiceClient) GetShopsByIDs(ctx context.Context, in *GetShopsByIDsRequest, opts ...grpc.CallOption) (*GetShopsByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShopsByIDsResponse)
	err := c.cc.Invoke(ctx, ShopsService_GetShopsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopsServiceServer is the server API for ShopsService service.
// All implementations must embed UnimplementedShopsServiceServer
// for forward compatibility.
type ShopsServiceServer interface {
	GetShopsByIDs(context.Context, *GetShopsByIDsRequest) (*GetShopsByIDsResponse, error)
	mustEmbedUnimplementedShopsServiceServer()
}

// UnimplementedShopsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopsServiceServer struct{}

func (UnimplementedShopsServiceServer) GetShopsByIDs(context.Context, *GetShopsByIDsRequest) (*GetShopsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopsByIDs not implemented")
}
func (UnimplementedShopsServiceServer) mustEmbedUnimplementedShopsServiceServer() {}
func (UnimplementedShopsServiceServer) testEmbeddedByValue()                      {}

// UnsafeShopsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopsServiceServer will
// result in compilation errors.
type UnsafeShopsServiceServer interface {
	mustEmbedUnimplementedShopsServiceServer()
}

func RegisterShopsServiceServer(s grpc.ServiceRegistrar, srv ShopsServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopsService_ServiceDesc, srv)
}

func _ShopsService_GetShopsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopsServiceServer).GetShopsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopsService_GetShopsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopsServiceServer).GetShopsByIDs(ctx, req.(*GetShopsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopsService_ServiceDesc is the grpc.ServiceDesc for ShopsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.ShopsService",
	HandlerType: (*ShopsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShopsByIDs",
			Handler:    _ShopsService_GetShopsByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shop.proto",
}
